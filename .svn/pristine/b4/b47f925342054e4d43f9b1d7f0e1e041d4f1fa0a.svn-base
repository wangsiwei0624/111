<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script src="https://cdn.bootcss.com/vue/2.5.2/vue.min.js"></script>
  <script src="https://cdn.bootcss.com/echarts/3.7.0/echarts.min.js"></script>
  <title>{{ title }}</title>
  <style>
    body {
      width: 100%;
    }
  </style>
</head>

<body>
  <div id="app">
    <!-- <input v-model="message" />
    <p>{{ message }}</p>
    <button v-on:click="show">点我</button>
    <div id="location"></div>
    <div id="param"></div> -->
    <div id="chart" style="width:100%;height:400%;"></div>
  </div>
  <script>
    new Vue({
      el: '#app',
      data: {
        requestUrl: '',
        objectData: {}, //画图接口的请求参数
        token: '',  // 带过来的签名
        vueChartOption: {},
        title: '',
      },
      mounted() {
        this.objectData = JSON.parse(localStorage.getItem('objectData'))
        console.log(this.objectData)

        this.token = localStorage.getItem('token')
        this.SSWType = localStorage.getItem('SSWType')
        this.requestUrl = localStorage.getItem('reqUrl')
        console.log(this.token)
        this.curveSearchClick()
      },
      methods: {
        show: function () { alert("run...") },
        // 初始化组件设置option
        init() {
          var myChart = echarts.init(document.getElementById('chart'));
          myChart.setOption(this.vueChartOption);
        },
        // 数据生成曲线
        curveSearchClick() {
          console.log(this.objectData.contentNo)
          if (this.objectData.contentNo === 'SSW') {
            console.log(this.SSWType)
            if (this.SSWType == 1) {
              this.getSSWEChartData()
            } else {
              this.getSSWSTEChartData()
            }
          } else if (this.objectData.contentNo === 'JY') {
            this.getJYEChartData()
          } else {
            this.getBSWModelEChartData()
          }
        },
        // 获取深部位移剖面图
        getSSWEChartData() {
          const that = this
          this.ajax({
            type: 'POST',
            url: this.requestUrl + 'monitor/monData/getSSWEChartData',
            dataType: '',
            data: JSON.stringify(this.objectData),
            beforeSend: function () {
              //some js code 
            },
            success: function (req) {
              // parent.document.title = req.data.title
              that.drawLineSSWLeft(req.data)
            },
            error: function () {
              console.log("error")
            }
          })
        },
        // 获取深部位移st图
        getSSWSTEChartData() {
          const that = this
          this.ajax({
            type: 'POST',
            url: this.requestUrl + 'wx/monitor/monData/getSSWSTEChartData',
            dataType: '',
            data: JSON.stringify(this.objectData),
            beforeSend: function () {
              //some js code 
            },
            success: function (req) {
              // parent.document.title = req.data.title
              that.drawLineSSW(req.data)
            },
            error: function () {
              console.log("error")
            }
          })
        },
        // 获取降雨量st图
        getJYEChartData() {
          const that = this
          this.ajax({
            type: 'POST',
            url: this.requestUrl + 'monitor/monData/getJYEChartData',
            dataType: '',
            data: JSON.stringify(this.objectData),
            beforeSend: function () {
              //some js code 
            },
            success: function (req) {
              // parent.document.title = req.data.title
              that.drawJYchart(req.data)
            },
            error: function () {
              console.log("error")
            }
          })
        },
        // 获取其他类型图表
        getBSWModelEChartData() {
          const that = this
          this.ajax({
            type: 'POST',
            url: this.requestUrl + 'monitor/monData/getBSWModelEChartData',
            data: JSON.stringify(this.objectData),
            beforeSend: function () {
              //some js code 
            },
            success: function (req) {
              // parent.document.title = req.data.title
              that.drawLine(req.data)
            },
            error: function () {
              console.log("error")
            }
          })
        },

        // ===================深部位移剖面图===================
        drawLineSSWLeft(object) {
          // 格式化数据
          this.chartSSWDataFormat(object)
          // 绘制图表
          let vueChartOption = {
            title: {
              show: false,
              padding: 0,
              text: object.title,
              x: 'center',
              y: 'top',
              top: 1
            },
            color: ['#FF8400', '#33A9AC', '#647FC5', '#982062', '#0089FF', '#F0FF00', '#9BCF9C', '#AE6DAF', '#DFC19D', '#759FBA', '#C9C669', '#F433D2', '#57C3AE'],
            /* tooltip: {
              trigger: 'axis',
              axisPointer: { // 坐标轴指示器，坐标轴触发有效
                type: 'line' // 默认为直线，可选为：'line' | 'shadow'
              }
            }, */
            grid: {
              left: '3%',
              right: '10%',
              bottom: '20%',
              top: '5%',
              containLabel: true
            },
            toolbox: {
              show: false,
              right: 15,
              feature: {
                saveAsImage: {}
              }
            },
            xAxis: {
              position: 'top',
              type: 'value',
              name: '位移',
              nameGap: '5',
              splitLine: {
                show: false
              },
              axisLabel: {
                formatter: '{value} mm'
              },
              axisLine: {
                lineStyle: {
                  type: 'solid'
                },
                symbol: ['none', 'arrow']
              },
              data: object.xDatas
            },
            yAxis: {
              type: 'category',
              axisLine: {
                onZero: false,
                lineStyle: {
                  type: 'solid'
                },
                symbol: ['none', 'arrow']
              },
              name: '埋深',
              axisLabel: {
                formatter: '{value} m'
              },
              splitLine: {
                show: true,
                lineStyle: {
                  type: 'solid'
                }
              },
              boundaryGap: true,
              inverse: true,
              // 埋深Array
              data: object.depth
            },
            dataZoom: [{
              type: 'inside',
              start: 0,
              end: 100,
              height: 10
            }],
            legend: {
              show: false,
              orient: 'vertical',
              right: 1,
              y: 'top',
              top: 50,
              type: 'scroll',
              animation: false,
              data: object.legendData
            },
            series: object.seriesData
          }

          this.vueChartOption = vueChartOption
          this.init()
        },
        // 处理深部位移剖面
        chartSSWDataFormat(data) {
          data.seriesData.map(function (value, index, array) {
            value.type = 'line'
            value.animation = false
            value.smooth = true
            value.connectNulls = true
            value.sampling = 'average'
            value.hoverAnimation = false
            value.showSymbol = false
            value.showAllSymbol = false
            value.lineStyle = {
              normal: {}
            }
            // 设置超过阈值的颜色
            value.data = value.data || []
            value.pieces = value.pieces || []
            if (value.data.length > 0) {
              var mainData
              value.data.some((da, j) => {
                if (da != null) {
                  mainData = da
                  return true
                }
              })
              // 遍历阈值数组，从四级开始遍历，以最终大于的阈值计数设置预警颜色
              value.pieces.some((val, i) => {
                if (mainData === val || mainData > val) {
                  switch (i) {
                    case 3:
                      value.itemStyle = {
                        color: '#FF8400'
                      }
                      break
                    case 2:
                      value.itemStyle = {
                        color: '#33A9AC'
                      }
                      break
                    case 1:
                      value.itemStyle = {
                        color: '#0089FF'
                      }
                      break
                    case 0:
                      value.itemStyle = {
                        color: '#E91818'
                      }
                      break
                  }
                  return true
                }
              })
            }
          })
        },
        // ==================深部位移ST曲线图=====================
        drawLineSSW(object) {
          this.lineSSWFormat(object)
          // 绘制图表
          let vueChartOption = {
            title: {
              show: false,
              padding: 0,
              text: object.title,
              x: 'center',
              y: 'top',
              top: 5
            },
            color: ['#FF8400', '#33A9AC', '#647FC5', '#982062', '#0089FF', '#F0FF00', '#9BCF9C', '#AE6DAF', '#DFC19D', '#759FBA', '#C9C669', '#F433D2', '#57C3AE'],
            tooltip: {
              trigger: 'axis',
              axisPointer: { // 坐标轴指示器，坐标轴触发有效
                type: 'line' // 默认为直线，可选为：'line' | 'shadow'
              }
            },
            toolbox: {
              show: false,
              right: 15,
              feature: {
                saveAsImage: {}
              }
            },
            grid: {
              left: '3%',
              right: '9%',
              bottom: '13%',
              top: '10%',
              containLabel: true
            },
            xAxis: {
              type: 'category',
              name: '时间',
              nameGap: '5',
              splitNumber: 8,
              splitLine: {
                show: false,
                lineStyle: {
                  type: 'solid'
                }
              },
              axisLine: {
                lineStyle: {
                  type: 'solid'
                },
                symbol: ['none', 'arrow']
              },
              axisLabel: {
                // 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引
                formatter: function (value, index) {
                  let timeString = ''
                  let str = value.split(' ')
                  let str1 = str[0].split('-')
                  if (str.length > 0) {
                    timeString = str1[1] + '-' + str1[2] + '\n' + str[1]
                  }
                  return timeString
                },
                textStyle: {
                  color: '#333333', // 更改坐标轴文字颜色
                  fontSize: 12 // 更改坐标轴文字大小
                }
              },
              data: object.xTimes
            },
            yAxis: {
              type: 'value',
              name: '变化量(mm)',
              position: 'start',
              splitLine: {
                show: true,
                lineStyle: {
                  type: 'solid'
                }
              },
              axisLine: {
                symbol: ['none', 'arrow']
              },
              axisLabel: {
                textStyle: {
                  color: '#454545', // 更改坐标轴文字颜色
                  fontSize: 12 // 更改坐标轴文字大小
                },
                formatter: function (value, index) {
                  let timeString = value
                  return timeString
                },
              }
            },
            dataZoom: [{
              type: 'inside',
              start: 0,
              end: 100,
              height: 10
            }],
            legend: {
              show: true,
              x: 'center',
              y: 'top',
              type: 'plain',
              top: 15,
              bottom: 15,
              data: object.legendData
            },
            series: object.seriesData
          }
          this.vueChartOption = vueChartOption
          this.init()
        },
        // 处理ST曲线图
        lineSSWFormat(data) {
          data.seriesData.map(function (value, index, array) {
            value.type = 'line'
            value.smooth = true
            value.connectNulls = true
            value.symbolSize = 6
            value.sampling = 'average'
            value.label = {
              show: false
            }
            value.lineStyle = {
              normal: {}
            }
            /* value.markPoint = {
              data: [
                {type: 'max', name: '最大值'},
                {type: 'min', name: '最小值'}
              ]
            } */
          })
        },
        // ===================雨量图==========================
        drawJYchart(object) {
          this.chartJYFormat(object)
          // 绘制图表
          let vueChartOption = {
            title: {
              show: false,
              text: object.title,
              x: 'center',
              y: 'top',
              top: 10
            },
            tooltip: {
              trigger: 'axis',
              axisPointer: {
                type: 'cross',
                crossStyle: {
                  color: '#999'
                }
              }
            },
            grid: {
              left: '3%',
              right: '9%',
              bottom: '15%',
              top: '10%',
              containLabel: true
            },
            xAxis: {
              type: 'category',
              splitNumber: 8,
              splitLine: {
                show: false
              },
              axisLabel: {
                // 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引
                formatter: function (value, index) {
                  let timeString = ''
                  // debugger
                  let str = value.split(' ')
                  let str1 = str[0].split('-')
                  if (str.length > 0) {
                    timeString = str1[1] + '-' + str1[2] + '\n' + str[1]
                  }
                  return timeString
                }
              },
              name: '时间',
              nameGap: '5',
              data: object.xTimes
            },
            yAxis: {
              type: 'value',
              name: '降雨量(mm)',
              position: 'start',
              splitLine: {
                show: true,
                lineStyle: {
                  type: 'solid'
                }
              },
              axisLabel: {
                formatter: '{value}'
              }
            },
            dataZoom: [{
              type: 'inside',
              start: 0,
              end: 100,
              height: 10
            }],
            legend: {
              show: true,
              x: 'center',
              top: 10,
              type: 'scroll',
              data: object.legendData
            },
            series: object.seriesData
          }
          this.vueChartOption = vueChartOption
          this.init()
        },
        // 处理雨量图
        chartJYFormat(object) {
          object.seriesData.map(function (value, index, array) {
            if (value.type === 'line') {
              value.smooth = true
              value.symbolSize = 6
              // value.yAxisIndex = 1
              value.connectNulls = false
              /* value.markPoint = {
                data: [
                  {type: 'max', name: '最大值'},
                  {type: 'min', name: '最小值'}
                ]
              } */
            }
          })
        },
        /**
           * 公共获取阈值数据
           * @param object
           * @param visualMapArray
           * @param seriesArray
           * @param index
           * @param typeColor
           */
        getPieces(object, visualMapArray, seriesArray, index, typeColor) {
          // 阈值数据构造-start
          var visualMap = {}
          visualMap.seriesIndex = seriesArray.length - 1
          visualMap.show = false
          var piecesArray = []
          object.map(function (pData, pi, array) {
            // 构造pieces
            var pieces_ = {}
            switch (pi) {
              case 0:
                if (pData !== 0) {
                  pieces_.color = '#59B4FF' // 阈值-四级的颜色
                  pieces_.gt = pData
                  pieces_.lte = array[pi + 1]
                }
                break
              case 1:
                if (pData !== 0) {
                  pieces_.color = '#F3DA04' // 阈值-三级变化的颜色
                  pieces_.gt = pData
                  pieces_.lte = array[pi + 1]
                }
                break
              case 2:
                if (pData !== 0) {
                  pieces_.color = '#E88F59' // 阈值-四级级变化的颜色
                  pieces_.gt = pData
                  pieces_.lte = array[pi + 1]
                }
                break
              case 3:
                if (pData !== 0) {
                  pieces_.color = '#E10000' // 阈值-四级级变化的颜色
                  pieces_.gt = pData
                }
                break
            }
            piecesArray.push(pieces_)
          })
          visualMap.pieces = piecesArray
          visualMap.outOfRange = {
            color: typeColor
          }
          if (visualMap.pieces.length > 0) {
            visualMapArray.push(visualMap)
          }
        },
        // ===================表面位移=========================
        drawLine(object) {
          console.log('drawline1234')
          var paramData = this.chartDataFormat(object)
          let vueChartOption = {
            renderer: 'svg',
            title: {
              show: false,
              padding: 0,
              text: object.title,
              x: 'center',
              y: 'top',
              top: 5,
              bottom: '10%'
            },
            calculable: false,
            tooltip: {
              trigger: 'axis',
              axisPointer: { // 坐标轴指示器，坐标轴触发有效
                type: 'line' // 默认为直线，可选为：'line' | 'shadow'
              }
              /* formatter: function (params) {
                var tip = '';
                if (params != null && params.length > 0) {
                  tip += params[0].name + '<br />'
                  for (let i = 0; i < params.length; i++) {
                    tip += params[i].marker
                  }
                }
                return tip
              } */
            },
            toolbox: {
              show: false,
              right: 20,
              feature: {
                saveAsImage: {}
              }
            },
            grid: {
              left: '3%',
              right: '9%',
              bottom: '15%',
              top: '10%',
              containLabel: true
            },
            xAxis: {
              type: 'category',
              name: '时间',
              nameGap: '10',
              splitNumber: 8,
              splitLine: {
                show: false,
                lineStyle: {
                  type: 'solid'
                }
              },
              axisLine: {
                lineStyle: {
                  type: 'solid'
                },
                symbol: ['arrow', 'arrow'],
                // symbolSize: [20, 25],
                // symbolOffset: [0, 20]
              },
              axisLabel: {
                // 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引
                formatter: function (value, index) {
                  let timeString = ''
                  let str = value.split(' ')
                  let str1 = str[0].split('-')
                  if (str.length > 0) {
                    timeString = str1[1] + '-' + str1[2] + '\n' + str[1]
                  }
                  return timeString
                },
                textStyle: {
                  color: '#333333', // 更改坐标轴文字颜色
                  fontSize: 12 // 更改坐标轴文字大小
                }
              },
              data: object.xTimes
            },
            yAxis: {
              type: 'value',
              name: '数据(mm)',
              position: 'start',
              boundaryGap: [0, '100%'],
              splitLine: {
                show: true,
                lineStyle: {
                  type: 'solid'
                }
              },
              axisLine: {
                symbol: ['arrow', 'arrow']
              },
              axisLabel: {
                formatter: '{value}',
                textStyle: {
                  color: '#454545', // 更改坐标轴文字颜色
                  fontSize: 12 // 更改坐标轴文字大小
                }
              }
            },
            dataZoom: [{
              type: 'inside',
              start: 0,
              end: 100,
              height: 10
            }],
            // visualMap: paramData.visualMapArray,
            legend: {
              show: true,
              x: 'center',
              top: '3%',
              bottom: '3%',
              // type: 'scroll',
              itemWidth: 10,
              itemHeight: 10,
              data: object.legendData
            },
            series: paramData.seriesArray
          }
          this.vueChartOption = vueChartOption
          console.log('表面位移option', this.vueChartOption)
          this.init()
        },
        // 处理位移类1
        chartDataFormat(object) {
          var that = this
          var symbols = ['diamond', 'circle', 'rect', 'triangle', 'roundRect', 'arrow', 'pin']
          var color = ['#FF8400', '#33A9AC', '#647FC5', '#982062', '#0089FF', '#F0FF00', '#9BCF9C', '#AE6DAF', '#DFC19D', '#759FBA', '#C9C669', '#F433D2', '#57C3AE']

          var visualMapArray = []
          var seriesArray = []

          object.pieces = object.pieces || []
          object.seriesData = object.seriesData || []
          object.seriesData.map(function (value, index) {
            value.COLLECT_DATA = value.COLLECT_DATA || []
            value.ONCE_OFFSET = value.ONCE_OFFSET || []
            value.TOTAL_OFFSET = value.TOTAL_OFFSET || []
            value.HOUR24_OFFSET = value.HOUR24_OFFSET || []

            if (value.COLLECT_DATA.length > 0) {
              var name = value.pointNo + '-采集值'

              var dataList = object.pieces[index].COLLECT_DATA || []
              that.getCommonFormat(seriesArray, symbols[index], color, that, visualMapArray,
                name, index, value.COLLECT_DATA, dataList)
            }
            if (value.ONCE_OFFSET.length > 0) {
              var name = value.pointNo + '-本次变化'
              var dataList = object.pieces[index].ONCE_OFFSET || []
              that.getCommonFormat(seriesArray, symbols[index], color, that, visualMapArray,
                name, index, value.ONCE_OFFSET, dataList)
            }
            if (value.TOTAL_OFFSET.length > 0) {
              var name = value.pointNo + '-累计变化'
              var dataList = object.pieces[index].TOTAL_OFFSET || []
              that.getCommonFormat(seriesArray, symbols[index], color, that, visualMapArray,
                name, index, value.TOTAL_OFFSET, dataList)
            }
            if (value.HOUR24_OFFSET.length > 0) {
              var name = value.pointNo + '-24h变化'
              var dataList = object.pieces[index].HOUR24_OFFSET || []
              that.getCommonFormat(seriesArray, symbols[index], color, that, visualMapArray,
                name, index, value.HOUR24_OFFSET, dataList)
            }
          })
          return {
            seriesArray: seriesArray,
            visualMapArray: visualMapArray
          }
        },
        // 处理位移类2
        getCommonFormat(seriesArray, symbol, color, that, visualMapArray, name, index, seriesList, dataList) {
          var colorIndex = seriesArray.length
          var series = {}
          series.type = 'line'
          series.lineStyle = {
            width: 2
          }
          /*series.markPoint = {
            data: [
              {type: 'max', name: '最大值'},
              {type: 'min', name: '最小值'}
            ]
          } */
          series.symbol = symbol
          // series.label = {show: true};
          series.name = name
          var seriesData = []
          seriesList.map(function (data, i) {
            var seriesData_ = [data.systemTime, data.data]
            seriesData.push(seriesData_)
          })
          series.data = seriesData
          if (series.data.length > 500) {
            series.symbolSize = 6
            series.animation = false
            series.sampling = 'average'
          } else {
            series.smooth = true
            series.symbolSize = 5
          }
          series.animation = false
          series.itemStyle = {
            color: color[colorIndex]
          }
          seriesArray.push(series)

          if (dataList.length > 0) {
            that.getPieces(dataList, visualMapArray, seriesArray, index, color[colorIndex])
          }
        },

        // ajax封装
        ajax() {
          var ajaxData = {
            type: (arguments[0].type || "GET").toUpperCase(),
            url: arguments[0].url || "",
            async: arguments[0].async || "true",
            data: arguments[0].data || null,
            dataType: arguments[0].dataType || "json",
            contentType: arguments[0].contentType || "application/json",
            beforeSend: arguments[0].beforeSend || function () { },
            success: arguments[0].success || function () { },
            error: arguments[0].error || function () { }
          }

          ajaxData.beforeSend()
          var xhr = this.createxmlHttpRequest();
          xhr.responseType = ajaxData.dataType;

          xhr.open(ajaxData.type, ajaxData.url, ajaxData.async);
          xhr.setRequestHeader("Authorization", this.token)
          xhr.setRequestHeader("Content-Type", ajaxData.contentType);
          xhr.send(ajaxData.data);

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status == 200) {
                ajaxData.success(xhr.response)
              } else {
                ajaxData.error()
              }
            }
          }
        },

        createxmlHttpRequest() {
          if (window.ActiveXObject) {
            return new ActiveXObject("Microsoft.XMLHTTP");
          } else if (window.XMLHttpRequest) {
            return new XMLHttpRequest();
          }
        },

        convertData(data) {
          if (typeof data === 'object') {
            var convertResult = "";
            for (var c in data) {
              convertResult += c + "=" + data[c] + "&";
            }
            convertResult = convertResult.substring(0, convertResult.length - 1)
            return convertResult;
          } else {
            return data;
          }
        }
      }
    })
    window.onload = function () {
    }
    // ajax封装
    function ajax() {
      var ajaxData = {
        type: (arguments[0].type || "GET").toUpperCase(),
        url: arguments[0].url || "",
        async: arguments[0].async || "true",
        data: arguments[0].data || null,
        dataType: arguments[0].dataType || "json",
        contentType: arguments[0].contentType || "application/json",
        beforeSend: arguments[0].beforeSend || function () { },
        success: arguments[0].success || function () { },
        error: arguments[0].error || function () { }
      }

      ajaxData.beforeSend()
      var xhr = this.createxmlHttpRequest();
      xhr.responseType = ajaxData.dataType;

      xhr.open(ajaxData.type, ajaxData.url, ajaxData.async);
      xhr.setRequestHeader("token", "header-token-value")
      xhr.setRequestHeader("Content-Type", ajaxData.contentType);
      xhr.send(this.convertData(ajaxData.data));

      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
          if (xhr.status == 200) {
            ajaxData.success(xhr.response)
          } else {
            ajaxData.error()
          }
        }
      }
    }

    function createxmlHttpRequest() {
      if (window.ActiveXObject) {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } else if (window.XMLHttpRequest) {
        return new XMLHttpRequest();
      }
    }

    function convertData(data) {
      if (typeof data === 'object') {
        var convertResult = "";
        for (var c in data) {
          convertResult += c + "=" + data[c] + "&";
        }
        convertResult = convertResult.substring(0, convertResult.length - 1)
        return convertResult;
      } else {
        return data;
      }
    }



  </script>
</body>

</html>